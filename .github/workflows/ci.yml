name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # Trigger on version tags
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Lint with flake8
      run: |
        flake8 ugit/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ugit/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check ugit/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only ugit/ tests/
        
    - name: Type checking with mypy
      run: |
        mypy ugit/
        
    - name: Test with pytest
      run: |
        pytest --cov=ugit --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit pip-audit
        
    - name: Security check with bandit
      run: |
        bandit -r ugit/ -f json -o bandit-report.json
        
    - name: Dependency security check with pip-audit
      run: |
        pip-audit --format=json --output=safety-report.json --requirement=requirements.txt
        
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    if: startsWith(github.ref, 'refs/tags/') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Check if TestPyPI token is available
      id: check-token
      run: |
        if [ -n "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          echo "token-available=true" >> $GITHUB_OUTPUT
        else
          echo "token-available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è TEST_PYPI_API_TOKEN secret not configured - skipping TestPyPI upload"
        fi
        
    - name: Publish to TestPyPI
      if: steps.check-token.outputs.token-available == 'true'
      continue-on-error: true
      id: twine_upload
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m pip install --upgrade twine
        python -m twine upload --repository testpypi dist/* --skip-existing
        
    - name: Log release info
      run: |
        echo "‚úÖ Build artifacts created successfully for tag: ${{ github.ref_name }}"
        echo "üì¶ Package files:"
        ls -la dist/
        if [ "${{ steps.check-token.outputs.token-available }}" == "true" ]; then
          if [ "${{ steps.twine_upload.outcome }}" == "success" ]; then
            echo "üöÄ Package uploaded to TestPyPI"
          else
            echo "‚ö†Ô∏è TestPyPI upload failed. Check the logs from the 'Publish to TestPyPI' step."
          fi
        else
          echo "üí° To enable TestPyPI publishing, add TEST_PYPI_API_TOKEN secret to repository"
        fi
        
    # Uncomment when ready for production releases
    # - name: Publish to PyPI
    #   if: startsWith(github.ref, 'refs/tags/')
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*